var ServiceAPI = 'http://localhost:3000/service';
var UsersAPI ='http://localhost:3000/user';
function start(){
    getData((services, user) => {
        renderServices(services, user);
        
    });
    var editServicetId = localStorage.getItem("editServicetId");
    if (editServicetId && window.location.pathname.includes("detail_service.html")) {
        watchDetailService(editServicetId);
    }
    
}
start();
function getData(callback) {
    let token = localStorage.getItem("token"); // L·∫•y token t·ª´ localStorage

    if (!token) {
        console.error("Kh√¥ng t√¨m th·∫•y token, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
        return;
    }

    Promise.all([
        fetch(ServiceAPI, {
            headers: {
                "Authorization": `Bearer ${token}`,
                "Content-Type": "application/json"
            }
        }).then(res => res.json()),

        fetch(UsersAPI, {
            headers: {
                "Authorization": `Bearer ${token}`,
                "Content-Type": "application/json"
            }
        }).then(res => res.json()),
    ])
        .then(([services, users]) => {
            callback(services, users);
        })
        .catch(error => console.error("L·ªói khi l·∫•y d·ªØ li·ªáu:", error));
}
//render table data
function renderServices(services, users) {
    var listServicesBlock = document.querySelector('#list-service tbody');
    if (!listServicesBlock) return;

    // H·ªßy DataTables n·∫øu ƒë√£ kh·ªüi t·∫°o
    if ($.fn.DataTable.isDataTable('#list-service')) {
        $('#list-service').DataTable().destroy();
    }

    var htmls = services.map(function (service) {
        var supplier = users.find(user => user.id === service.user_id);
        var supplierName = supplier ? `${supplier.last_name} ${supplier.first_name}` : 'Kh√¥ng c√≥ nh√† cung c·∫•p';

        return `
            <tr class="list-service-${service.id}">
                <td>${service.name}</td>
                <td style="width: 40%;">${service.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}</td>
                <td>${service.quantity}</td>
                <td>${service.hourly_salary ? service.hourly_salary.toLocaleString() + " VND" : '0 VND'}</td>
                <td>${service.created_at}</td>
                <td>${service.place || "ko c√≥ ƒë·ªãa ƒëi·ªÉm"}</td>
                <td>${supplierName}</td>
                <td class="text-center">
                    <div class="action-dropdown">
                        <button class="btn btn-light action-btn">...</button>
                        <div class="dropdown-content">
                            <button class="dropdown-item delete-btn" data-id="${service.id}">Xo√°</button>
                             <button class="dropdown-item detail-btn" data-id="${service.id}">Xem chi ti·∫øt</button>
                        </div>
                    </div>
                </td>
            </tr>
        `;
    });

    listServicesBlock.innerHTML = htmls.join('');

    // Kh·ªüi t·∫°o l·∫°i DataTables
    var table = $('#list-service').DataTable({
        "order": [[4, "desc"]],
        "language": {
            "search": "T√¨m ki·∫øm:",
            "lengthMenu": "Hi·ªÉn th·ªã _MENU_ d·ªãch v·ª•",
            "info": "Hi·ªÉn th·ªã _START_ ƒë·∫øn _END_ c·ªßa _TOTAL_ d·ªãch v·ª•",
            "infoEmpty": "Kh√¥ng c√≥ d·ªØ li·ªáu",
            "zeroRecords": "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£",
            "paginate": {
                "first": "ƒê·∫ßu",
                "last": "Cu·ªëi",
                "next": "Ti·∫øp",
                "previous": "Tr∆∞·ªõc"
            }
        }
    });

    // üõ† G√°n s·ª± ki·ªán d√πng delegate ƒë·ªÉ ho·∫°t ƒë·ªông tr√™n t·∫•t c·∫£ c√°c trang
    $('#list-service tbody').on('click', '.action-btn', function (event) {
        let dropdown = $(this).next('.dropdown-content');
        $('.dropdown-content').not(dropdown).hide(); // ·∫®n c√°c dropdown kh√°c
        dropdown.toggle();
        event.stopPropagation();
    });

    // X·ª≠ l√Ω s·ª± ki·ªán xo√°
    $('#list-service tbody').on('click', '.delete-btn', function () {
        let serviceId = $(this).data('id');
        handleDeleteService(serviceId);
    });
     // X·ª≠ l√Ω d·ªãch v·ª• xem chi ti·∫øt
     $('#list-service tbody').on('click', '.detail-btn', function () {
        let serviceId = $(this).data('id');
        handleDetailService(serviceId);
    });
    // ƒê√≥ng dropdown khi b·∫•m ra ngo√†i
    $(document).click(function () {
        $('.dropdown-content').hide();
    });
}

//T·∫°o Xo√° dich vu
function handleDeleteService(id) {
    var options = {
        method: 'DELETE',
        headers: {
            "Content-Type": "application/json",
        },

    };
    fetch(ServiceAPI + '/' + id, options)
        .then(function (respone) {
            return respone.json();
        })
        .then(function () {
            var listService = document.querySelector('.list-service-' + id)
            if (listService) {
                listService.remove();
            }
            alert("Xo√° d·ªãch v·ª• th√†nh c√¥ng!");
        })
        .catch(function () {
            alert("Xo√° kh√¥ng th√†nh c√¥ng!");
        });

}
//Xem chi ti·∫øt d·ªãch v·ª•
function handleDetailService(serviceId) {
    localStorage.setItem("editServicetId", serviceId); // L∆∞u ID v√†o localStorage
    window.location.href = "detail_service.html"; // Chuy·ªÉn ƒë·∫øn trang chi ti·∫øt
}
function watchDetailService(editServicetId) {
    if (!editServicetId) return;

    const imagePreview = document.getElementById("Image"); // Kh·ªõp v·ªõi id trong HTML
    const defaultImagePath = "assets/img/card.jpg";

    // L·∫•y token t·ª´ localStorage
    let token = localStorage.getItem("token");

    if (!token) {
        console.error("Kh√¥ng t√¨m th·∫•y token, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
        alert("Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
        return;
    }

    // L·∫•y danh s√°ch ng∆∞·ªùi d√πng
    fetch(UsersAPI, {
        method: 'GET',
        headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
        }
    })
        .then(response => response.json())
        .then(users => {
            // L·∫•y th√¥ng tin d·ªãch v·ª•
            return fetch(`${ServiceAPI}/${editServicetId}`, {
                method: 'GET',
                headers: {
                   'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(service => ({ service, users })); // Tr·∫£ v·ªÅ c·∫£ service v√† users
        })
        .then(({ service, users }) => {
            // T√¨m nh√† cung c·∫•p t·ª´ users d·ª±a tr√™n service.user_id
            const supplier = users.find(user => user.id === service.user_id);
            const supplierName = supplier ? `${supplier.last_name} ${supplier.first_name}` : "Kh√¥ng x√°c ƒë·ªãnh";

            // C·∫≠p nh·∫≠t c√°c th·∫ª <div> v·ªõi d·ªØ li·ªáu d·ªãch v·ª•
            document.getElementById("name").textContent = service.name || "Kh√¥ng c√≥ t√™n";
            document.getElementById("description").textContent = service.description || "Kh√¥ng c√≥ m√¥ t·∫£";
            document.getElementById("quantity").textContent = service.quantity || "0";
            document.getElementById("price").textContent = service.hourly_salary ? `${service.hourly_salary.toLocaleString()} VND` : "Kh√¥ng x√°c ƒë·ªãnh";
            document.getElementById("place").textContent = service.place || "Kh√¥ng c√≥ ƒë·ªãa ƒëi·ªÉm";
            document.getElementById("supplier").textContent = supplierName;

            // Hi·ªÉn th·ªã ·∫£nh d·ªãch v·ª•
            if (service.img) {
                try {
                    const baseApiUrl = 'http://localhost:8080/event-management/api/v1/FileUpload/files/';
                    const fileName = service.img.split('/').pop();
                    const imageUrl = `${baseApiUrl}${fileName}`;

                    if (imagePreview) {
                        imagePreview.src = imageUrl;
                        imagePreview.onerror = function () {
                            console.error('L·ªói t·∫£i ·∫£nh:', imageUrl);
                            this.src = defaultImagePath;
                        };
                    }
                } catch (error) {
                    console.error('L·ªói x·ª≠ l√Ω ·∫£nh:', error);
                    if (imagePreview) imagePreview.src = defaultImagePath;
                }
            } else {
                if (imagePreview) imagePreview.src = defaultImagePath;
            }
        })
        .catch(error => {
            console.error("L·ªói khi l·∫•y d·ªØ li·ªáu d·ªãch v·ª•:", error);
            alert("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin d·ªãch v·ª•!");
        });
}