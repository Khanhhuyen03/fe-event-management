var ContractAPI = 'http://localhost:8080/event-management/api/contracts';
//var CustomerAPI = 'http://localhost:3000/customer';
var RentalAPI = 'http://localhost:8080/event-management/rentals';

function start() {
    getData((contract, rental) => {
        renderContracts(contract, rental);
    });

    // Kh·ªüi t·∫°o modal
    initializeModal();
}

start();

// function getData(callback) {
//     let token = localStorage.getItem("token"); // L·∫•y token t·ª´ localStorage

//     if (!token) {
//         console.error("Kh√¥ng t√¨m th·∫•y token, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
//         return;
//     }

//     Promise.all([
//         fetch(ContractAPI, {
//             headers: {
//                 "Authorization": `Bearer ${token}`,
//                 "Content-Type": "application/json"
//             }
//         }).then(res => res.json()),

//         // fetch(CustomerAPI, {
//         //     headers: {
//         //         "Authorization": `Bearer ${token}`,
//         //         "Content-Type": "application/json"
//         //     }
//         // }).then(res => res.json()),

//         fetch(RentalAPI, {
//             headers: {
//                 "Authorization": `Bearer ${token}`,
//                 "Content-Type": "application/json"
//             }
//         }).then(res => res.json()),
//     ])
//         .then(([contract, rental]) => {
//             callback(contract, rental);
//         })
//         .catch(error => console.error("L·ªói khi l·∫•y d·ªØ li·ªáu:", error));
// }

// Status contract
function getData(callback) {
    let token = localStorage.getItem("token");
    if (!token) {
        console.error("Kh√¥ng t√¨m th·∫•y token, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
        return;
    }

    Promise.all([
        fetch(ContractAPI, {
            headers: {
                "Authorization": `Bearer ${token}`,
                "Content-Type": "application/json"
            }
        })
            .then(res => {
                if (!res.ok) throw new Error(`L·ªói ContractAPI: ${res.status}`);
                return res.json();
            }),
        fetch(RentalAPI, {
            headers: {
                "Authorization": `Bearer ${token}`,
                "Content-Type": "application/json"
            }
        })
            .then(res => {
                if (!res.ok) throw new Error(`L·ªói RentalAPI: ${res.status}`);
                return res.json();
            }),
    ])
        .then(([contractData, rentalData]) => {
            // Log ph·∫£n h·ªìi th√¥ ƒë·ªÉ debug
            console.log("Ph·∫£n h·ªìi th√¥ ContractAPI:", contractData);
            console.log("Ph·∫£n h·ªìi th√¥ RentalAPI:", rentalData);

            // Chu·∫©n h√≥a d·ªØ li·ªáu h·ª£p ƒë·ªìng
            let contracts = contractData.result || contractData.data?.items || contractData.data || contractData || [];
            if (!Array.isArray(contracts)) {
                contracts = [];
            }

            // Chu·∫©n h√≥a d·ªØ li·ªáu rental
            let rentals = Array.isArray(rentalData) ? rentalData : rentalData.data || rentalData.result || [];
            if (!Array.isArray(rentals)) {
                rentals = [];
            }

            console.log("H·ª£p ƒë·ªìng ƒë√£ x·ª≠ l√Ω:", contracts);
            console.log("Rental ƒë√£ x·ª≠ l√Ω:", rentals);
            callback(contracts, rentals);
        })
        .catch(error => {
            console.error("L·ªói khi l·∫•y d·ªØ li·ªáu:", error);
            alert("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu: " + error.message);
            callback([], []); // Fallback v·ªÅ m·∫£ng r·ªóng
        });
}
// function getData(callback) {
//     let token = localStorage.getItem("token");

//     if (!token) {
//         console.error("Kh√¥ng t√¨m th·∫•y token, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
//         return;
//     }

//     Promise.all([
//         fetch(ContractAPI, {
//             headers: {
//                 "Authorization": `Bearer ${token}`,
//                 "Content-Type": "application/json"
//             }
//         }).then(res => res.json()),
//     ])
//         .then(([res]) => {
//             console.log("D·ªØ li·ªáu contract t·ª´ API:", res);
//             callback(res.result);
//         })
//         .catch(error => console.error("L·ªói khi l·∫•y d·ªØ li·ªáu:", error));
// }
const ContractStatus = {
    Draft: "Draft",
    DepositPaid: "DepositPaid",
    InProgress: "InProgress",
    WaitingPaid: "WaitingPaid",
    Completed: "Completed",
    Cancel: "Cancel",
    AdminCancel: "AdminCancel"
};

function getStatusInfo(status) {
    switch (status) {
        case ContractStatus.Draft:
            return { text: "Nh√°p", color: "black" };
        case ContractStatus.DepositPaid:
            return { text: "ƒê√£ ƒê·∫∑t c·ªçc", color: "green" };
        case ContractStatus.InProgress:
            return { text: "ƒêang th·ª±c hi·ªán", color: "blue" };
        case ContractStatus.WaitingPaid:
            return { text: "Ch·ªù thanh to√°n", color: "orange" };
        case ContractStatus.Completed:
            return { text: "Ho√†n th√†nh", color: "orange" };
        case ContractStatus.Cancel:
            return { text: "H·ªßy", color: "red" };
        case ContractStatus.AdminCancel:
            return { text: "B·ªã h·ªßy b·ªüi admin", color: "red" };
        default:
            return { text: "Kh√¥ng x√°c ƒë·ªãnh", color: "gray" };
    }
}
function getLighterColor(color) {
    const colorMap = {
        black: "rgba(0, 0, 0, 0.1)",
        green: "rgba(68, 158, 68, 0.1)",
        blue: "rgba(94, 163, 206, 0.1)",
        orange: "rgba(206, 159, 73, 0.1)",
        red: "rgba(212, 81, 81, 0.1)",
        gray: "rgba(128, 128, 128, 0.1)"
    };
    return colorMap[color] || "rgba(128, 128, 128, 0.1)"; // M·∫∑c ƒë·ªãnh l√† m√†u x√°m nh·∫°t n·∫øu kh√¥ng x√°c ƒë·ªãnh
}

// Render table data
// function renderContracts(contracts, rentals) {
//     var listContractsBlock = document.querySelector('#list-contact tbody');
//     if (!listContractsBlock) return;

//     // H·ªßy DataTables n·∫øu ƒë√£ kh·ªüi t·∫°o
//     if ($.fn.DataTable.isDataTable('#list-contact')) {
//         $('#list-contact').DataTable().destroy();
//     }

//     var htmls = contracts.map(function (contract) {
//         // var customer = customers.find(c => c.id === contract.customer_id);
//         // var customerName = customer ? customer.name : "Kh√¥ng x√°c ƒë·ªãnh";

//         var rental = rentals.find(r => r.id === contract.rental_id);
//         var totalPrice = rental ? rental.totalPrice.toLocaleString() + " VND" : "0 VND";
//         var rentalStartTime = rental ? new Date(rental.rentalStartTime).toLocaleDateString() : "N/A";
//         var rentalEndTime = rental ? new Date(rental.rentalEndTime).toLocaleDateString() : "N/A";
//         const statusInfo = getStatusInfo(Number(contract.status));

//         return `
//             <tr class="list-contract-${contract.id}">
//                 <td>${contract.name}</td>
//                 <td>Min n√®</td>
//                 <td>${totalPrice}</td>
//                 <td>
//                     <span class="status-label" style="color: ${statusInfo.color}; background-color: ${getLighterColor(statusInfo.color)};">
//                         ${statusInfo.text}
//                     </span>
//                 </td>
//                 <td>${rentalStartTime}</td>
//                 <td>${rentalEndTime}</td>
//                 <td>${new Date(contract.created_at).toLocaleDateString()}</td>
//                 <td class="text-center">
//                     <div class="action-dropdown">
//                         <button class="btn btn-light action-btn">...</button>
//                         <div class="dropdown-content">
//                             <button class="dropdown-item cancel-btn" data-id="${contract.id}">H·ªßy h·ª£p ƒë·ªìng</button>
//                             <button class="dropdown-item update-btn" data-id="${contract.id}">Duy·ªát h·ª£p ƒë·ªìng</button>
//                             <button class="dropdown-item detail-btn" data-id="${contract.id}">Xem chi ti·∫øt</button>
//                         </div>
//                     </div>
//                 </td>
//             </tr>
//         `;
//     });

//     listContractsBlock.innerHTML = htmls.join('');

//     // Kh·ªüi t·∫°o l·∫°i DataTables
//     $('#list-contact').DataTable({
//         "order": [[6, "desc"]],
//         "language": {
//             "search": "T√¨m ki·∫øm:",
//             "lengthMenu": "Hi·ªÉn th·ªã _MENU_ h·ª£p ƒë·ªìng",
//             "info": "Hi·ªÉn th·ªã _START_ ƒë·∫øn _END_ c·ªßa _TOTAL_ h·ª£p ƒë·ªìng",
//             "infoEmpty": "Kh√¥ng c√≥ d·ªØ li·ªáu",
//             "zeroRecords": "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£",
//             "paginate": {
//                 "first": "ƒê·∫ßu",
//                 "last": "Cu·ªëi",
//                 "next": "Ti·∫øp",
//                 "previous": "Tr∆∞·ªõc"
//             }
//         }
//     });

//     // üõ† G√°n s·ª± ki·ªán d√πng delegate ƒë·ªÉ dropdown ho·∫°t ƒë·ªông tr√™n t·∫•t c·∫£ c√°c trang
//     $('#list-contact tbody').on('click', '.action-btn', function (event) {
//         let dropdown = $(this).next('.dropdown-content');
//         $('.dropdown-content').not(dropdown).hide(); // ·∫®n dropdown kh√°c
//         dropdown.toggle();
//         event.stopPropagation();
//     });

//     // X·ª≠ l√Ω s·ª± ki·ªán h·ªßy
//     $('#list-contact tbody').on('click', '.cancel-btn', function () {
//         let contractId = $(this).data('id');
//         handleCancelContract(contractId);
//     });

//     // X·ª≠ l√Ω s·ª± ki·ªán c·∫≠p nh·∫≠t (m·ªü modal)
//     $('#list-contact tbody').on('click', '.update-btn', function () {
//         let contractId = $(this).data('id');
//         handleUpdateContract(contractId);
//     });
//     //X·ª≠ l√Ω s·ª± ki·ªán xem h·ª£p ƒë·ªìng
//     $('#list-contact tbody').on('click', '.detail-btn', function () {
//         let contractId = $(this).data('id');
//         handleDetailContract(contractId);
//     });

//     // ƒê√≥ng dropdown khi b·∫•m ra ngo√†i
//     $(document).click(function () {
//         $('.dropdown-content').hide();
//     });
// }
function renderContracts(contracts, rentals) {
    var listContractsBlock = document.querySelector('#list-contact tbody');
    if (!listContractsBlock) {
        console.warn("Kh√¥ng t√¨m th·∫•y #list-contact tbody trong DOM");
        return;
    }

    if ($.fn.DataTable.isDataTable('#list-contact')) {
        $('#list-contact').DataTable().destroy();
    }

    if (!Array.isArray(contracts)) {
        console.error("contracts kh√¥ng ph·∫£i m·∫£ng:", contracts);
        listContractsBlock.innerHTML = `<tr><td colspan="8">Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p ƒë·ªìng</td></tr>`;
        return;
    }

    var htmls = contracts.map(function (contract) {
        var rental = rentals.find(r => r.id === contract.rental_id);
        var totalPrice = rental ? rental.totalPrice.toLocaleString() + " VND" : "0 VND";
        var rentalStartTime = rental ? new Date(rental.rentalStartTime).toLocaleDateString() : "N/A";
        var rentalEndTime = rental ? new Date(rental.rentalEndTime).toLocaleDateString() : "N/A";
        const statusInfo = getStatusInfo(contract.status) || { text: "Kh√¥ng x√°c ƒë·ªãnh", color: "gray" };

        return `
            <tr class="list-contract-${contract.id}">
                <td>${contract.name}</td>
                <td>${contract.customerName}</td>
                <td>${totalPrice}</td>
                <td>
                    <span class="status-label" style="color: ${statusInfo.color}; background-color: ${getLighterColor(statusInfo.color)};">
                        ${statusInfo.text}
                    </span>
                </td>
                <td>${rentalStartTime}</td>
                <td>${rentalEndTime}</td>
                <td>${new Date(contract.created_at || contract.createdAt).toLocaleDateString()}</td>
                <td class="text-center">
                    <div class="action-dropdown">
                        <button class="btn btn-light action-btn">...</button>
                        <div class="dropdown-content">
                            <button class="dropdown-item cancel-btn" data-id="${contract.id}">H·ªßy h·ª£p ƒë·ªìng</button>
                            <button class="dropdown-item update-btn" data-id="${contract.id}">Duy·ªát h·ª£p ƒë·ªìng</button>
                            <button class="dropdown-item detail-btn" data-id="${contract.id}">Xem chi ti·∫øt</button>
                        </div>
                    </div>
                </td>
            </tr>
        `;
    });

    listContractsBlock.innerHTML = htmls.join('');

    $('#list-contact').DataTable({
        "order": [[6, "desc"]],
        "language": {
            "search": "T√¨m ki·∫øm:",
            "lengthMenu": "Hi·ªÉn th·ªã _MENU_ h·ª£p ƒë·ªìng",
            "info": "Hi·ªÉn th·ªã _START_ ƒë·∫øn _END_ c·ªßa _TOTAL_ h·ª£p ƒë·ªìng",
            "infoEmpty": "Kh√¥ng c√≥ d·ªØ li·ªáu",
            "zeroRecords": "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£",
            "paginate": {
                "first": "ƒê·∫ßu",
                "last": "Cu·ªëi",
                "next": "Ti·∫øp",
                "previous": "Tr∆∞·ªõc"
            }
        }
    });

    $('#list-contact tbody').on('click', '.action-btn', function (event) {
        let dropdown = $(this).next('.dropdown-content');
        $('.dropdown-content').not(dropdown).hide();
        dropdown.toggle();
        event.stopPropagation();
    });

    $('#list-contact tbody').on('click', '.cancel-btn', function () {
        let contractId = $(this).data('id');
        handleCancelContract(contractId);
    });

    $('#list-contact tbody').on('click', '.update-btn', function () {
        let contractId = $(this).data('id');
        handleUpdateContract(contractId);
    });

    $('#list-contact tbody').on('click', '.detail-btn', function () {
        let contractId = $(this).data('id');
        handleDetailContract(contractId);
    });

    $(document).click(function () {
        $('.dropdown-content').hide();
    });
}
//render table data
// function renderContracts(contracts) {
//     var listContractsBlock = document.querySelector('#list-contact tbody');
//     if (!listContractsBlock) return;

//     // H·ªßy DataTables n·∫øu ƒë√£ kh·ªüi t·∫°o
//     if ($.fn.DataTable.isDataTable('#list-contact')) {
//         $('#list-contact').DataTable().destroy();
//     }

//     var htmls = contracts.map(function (contract) {

//         return `
//             <tr class="list-contract-${contract.id}">
//                 <td>${contract.name}</td>
//                 <td>Minh</td>
//                 <td>5000</td>
//                 <td>${contract.status}</td>
//                 <td>10/8</td>
//                 <td>24/6</td>
//                 <td>${new Date(contract.createdAt).toLocaleDateString()}</td>
//                 <td class="text-center">
//                     <div class="action-dropdown">
//                         <button class="btn btn-light action-btn">...</button>
//                         <div class="dropdown-content">
//                             <button class="dropdown-item delete-btn" data-id="${contract.id}">Xo√°</button>
//                         </div>
//                     </div>
//                 </td>
//             </tr>
//         `;
//     });

//     listContractsBlock.innerHTML = htmls.join('');

//     // Kh·ªüi t·∫°o l·∫°i DataTables
//     $('#list-contact').DataTable({
//         "order": [[6, "desc"]],
//         "language": {
//             "search": "T√¨m ki·∫øm:",
//             "lengthMenu": "Hi·ªÉn th·ªã MENU h·ª£p ƒë·ªìng",
//             "info": "Hi·ªÉn th·ªã START ƒë·∫øn END c·ªßa TOTAL h·ª£p ƒë·ªìng",
//             "infoEmpty": "Kh√¥ng c√≥ d·ªØ li·ªáu",
//             "zeroRecords": "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£",
//             "paginate": {
//                 "first": "ƒê·∫ßu",
//                 "last": "Cu·ªëi",
//                 "next": "Ti·∫øp",
//                 "previous": "Tr∆∞·ªõc"
//             }
//         }
//     });

//     // üõ† G√°n s·ª± ki·ªán d√πng delegate ƒë·ªÉ dropdown ho·∫°t ƒë·ªông tr√™n t·∫•t c·∫£ c√°c trang
//     $('#list-contact tbody').on('click', '.action-btn', function (event) {
//         let dropdown = $(this).next('.dropdown-content');
//         $('.dropdown-content').not(dropdown).hide(); // ·∫®n dropdown kh√°c
//         dropdown.toggle();
//         event.stopPropagation();
//     });

//     // X·ª≠ l√Ω s·ª± ki·ªán xo√°
//     $('#list-contact tbody').on('click', '.delete-btn', function () {
//         let contractId = $(this).data('id');
//         handleDeleteContract(contractId);
//     });

//     // ƒê√≥ng dropdown khi b·∫•m ra ngo√†i
//     $(document).click(function () {
//         $('.dropdown-content').hide();
//     });
// }

// Kh·ªüi t·∫°o modal
function initializeModal() {
    const modalElement = document.getElementById("upgradeRoleModal");
    if (!modalElement) {
        console.error("L·ªói: Kh√¥ng t√¨m th·∫•y modal.");
        return;
    }

    const modal = new bootstrap.Modal(modalElement);
    let selectedContractId = null;

    window.handleUpdateContract = function (contractId) {
        selectedContractId = contractId;
        modal.show();
    };

    const saveButton = document.getElementById("saveRole");
    saveButton.addEventListener("click", function () {
        const selectedStatus = document.querySelector('input[name="contractStatus"]:checked').value;
        updateContractStatus(selectedContractId, selectedStatus, (success) => {
            modal.hide();
            if (success) {
                alert("H·ª£p ƒë·ªìng ƒë√£ ƒë∆∞·ª£c duy·ªát v√† s·∫Ω ƒë∆∞·ª£c ti·∫øn h√†nh th·ª±c hi·ªán.");
            }
        });
    });
}

// C·∫≠p nh·∫≠t tr·∫°ng th√°i h·ª£p ƒë·ªìng qua API
function updateContractStatus(contractId, status, callback) {
    let token = localStorage.getItem("token");

    if (!token) {
        console.error("Kh√¥ng t√¨m th·∫•y token, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
        callback(false);
        return;
    }

    // Log d·ªØ li·ªáu g·ª≠i ƒëi ƒë·ªÉ debug
    console.log("C·∫≠p nh·∫≠t tr·∫°ng th√°i h·ª£p ƒë·ªìng:", { contractId, status });

    fetch(`${ContractAPI}/${contractId}`, {
        method: "PUT",
        headers: {
            "Authorization": `Bearer ${token}`,
            "Content-Type": "application/json"
        },
        body: JSON.stringify({ status: status }) // Status l√† chu·ªói, kh√¥ng c·∫ßn parseInt
    })
        .then(res => {
            if (!res.ok) {
                throw new Error(`L·ªói HTTP: ${res.status}`);
            }
            return res.json();

        })
        .then(data => {
            console.log("Ph·∫£n h·ªìi t·ª´ API:", data); // Log ph·∫£n h·ªìi ƒë·ªÉ debug
            callback(true);
        })
        .catch(error => {
            console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i h·ª£p ƒë·ªìng:", error);
            alert("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i h·ª£p ƒë·ªìng: " + error.message);
            console.log("C·∫≠p nh·∫≠t tr·∫°ng th√°i h·ª£p ƒë·ªìng 2:", { contractId, status });
            callback(false);
        });
}

// X·ª≠ l√Ω m·ªü modal ƒë·ªÉ ch·ªçn tr·∫°ng th√°i
function handleUpdateContract(contractId) {
    // G·ªçi h√†m window.handleUpdateContract ƒë·ªÉ m·ªü modal
    window.handleUpdateContract(contractId);
}

// X·ª≠ l√Ω h·ªßy h·ª£p ƒë·ªìng (chuy·ªÉn tr·∫°ng th√°i sang AdminCancel)
function handleCancelContract(contractId) {
    updateContractStatus(contractId, ContractStatus.AdminCancel, () => {
        alert("H·ª£p ƒë·ªìng ƒë√£ b·ªã h·ªßy b·ªüi h·ªá th·ªëng. Trong tr∆∞·ªùng h·ª£p kh√°ch h√†ng ƒë√£ ƒë·∫∑t c·ªçc, ti·ªÅn ƒë·∫∑t c·ªçc s·∫Ω ƒë∆∞·ª£c ho√†n tr·∫£ l·∫°i cho kh√°ch h√†ng.");
    });
}
//Xem h·ª£p ƒë·ªìng
function handleDetailContract(contractId) {
    localStorage.setItem("editContractId", contractId);
    window.location.href = "detail_contract.html";
}

function watchDetailContract(editContractId) {
    if (!editContractId) {
        console.error("Kh√¥ng c√≥ ID h·ª£p ƒë·ªìng ƒë·ªÉ xem chi ti·∫øt!");
        return;
    }

    console.log("Xem chi ti·∫øt h·ª£p ƒë·ªìng ID:", editContractId);

    const token = localStorage.getItem("token");
    if (!token) {
        console.error("Kh√¥ng t√¨m th·∫•y token, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
        return;
    }

    fetch(`http://localhost:8080/event-management/api/contracts/${editContractId}`, { // ƒê·ªïi endpoint
        method: 'GET',
        headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
        }
    })
        .then(response => {
            if (!response.ok) throw new Error(`L·ªói khi l·∫•y d·ªØ li·ªáu h·ª£p ƒë·ªìng: ${response.status}`);
            return response.json();
        })
        .then(data => {
            // Chu·∫©n h√≥a d·ªØ li·ªáu h·ª£p ƒë·ªìng gi·ªëng getData
            const contract = data.result || data.data || data || {};
            console.log("D·ªØ li·ªáu h·ª£p ƒë·ªìng:", contract);
            if (!contract.id) {
                throw new Error("D·ªØ li·ªáu h·ª£p ƒë·ªìng kh√¥ng h·ª£p l·ªá!");
            }
            return { contract };
        })
        .then(({ contract }) => {
            return fetch(RentalAPI, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (!response.ok) throw new Error(`L·ªói RentalAPI: ${response.status}`);
                    return response.json();
                })
                .then(rentals => {
                    // Chu·∫©n h√≥a rentals gi·ªëng getData
                    rentals = Array.isArray(rentals) ? rentals : rentals.data || rentals.result || [];
                    return { contract, rentals };
                });
        })
        .then(({ contract, rentals }) => {
            // const customer = customers.find(c => c.id === contract.customer_id);
            // const customerName = customer ? customer.name : "Kh√¥ng x√°c ƒë·ªãnh";
            // const customerPhone = customer ? customer.phone_number : "N/A";
            // const customerAddress = customer ? customer.address : "N/A";
            console.log("t√™n h·ª£p ƒë·ªìng:", contract.n);
            const rental = rentals.find(r => r.id === contract.rental_id);
            const totalPrice = rental ? rental.totalPrice.toLocaleString() + " ‚Ç´" : "0 ‚Ç´";
            const rentalStartTime = rental ? new Date(rental.rentalStartTime).toLocaleDateString() : "N/A";
            const rentalEndTime = rental ? new Date(rental.rentalEndTime).toLocaleDateString() : "N/A";

            // D√πng status d·∫°ng chu·ªói, th√™m fallback
            const statusInfo = getStatusInfo(contract.status) || { text: "Kh√¥ng x√°c ƒë·ªãnh", color: "gray" };

            // C·∫≠p nh·∫≠t giao di·ªán, gi·ªØ nguy√™n c√°c tr∆∞·ªùng mi ƒë√£ comment
            document.getElementById("status").textContent = statusInfo.text;
            document.getElementById("name").textContent = contract.name || "H·ª£p ƒë·ªìng kh√¥ng x√°c ƒë·ªãnh";
            document.getElementById("RentalStart").textContent = rentalStartTime;
            document.getElementById("RentalEnd").textContent = rentalEndTime;
            document.getElementById("price").textContent = totalPrice;
            document.getElementById("customerName").textContent = contract.customerName || "Kh√°ch h√†ng kh√¥ng x√°c ƒë·ªãnh";
            document.getElementById("phone").textContent = contract.customerPhone;
            document.getElementById("address").textContent = contract.eventAddress || "ƒê·ªãa ch·ªâ kh√¥ng x√°c ƒë·ªãnh";

            const statusElement = document.getElementById("status");
            statusElement.style.color = statusInfo.color;
            statusElement.style.backgroundColor = getLighterColor(statusInfo.color);
        })
        .catch(error => {
            console.error("L·ªói khi l·∫•y d·ªØ li·ªáu chi ti·∫øt h·ª£p ƒë·ªìng:", error);
            alert("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin h·ª£p ƒë·ªìng!");
        });
}